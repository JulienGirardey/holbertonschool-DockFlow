// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  firstName     String
  lastName      String
  email         String          @unique
  password      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  documents     UserDocuments[]
  settings      Settings?
  aiRequests    AiRequest[]

  @@map("users")
}

model UserDocuments {
  id            String              @id @default(cuid())
  userId        String
  title         String
  objective     String
  rawContent    String              @db.Text
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  // Relations
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  generatedDocuments GeneratedDocument[]
  aiRequests        AiRequest[]

  @@map("user_documents")
}

model Settings {
  id          String  @id @default(cuid())
  userId      String  @unique
  language    String  @default("en")
  colorMode   String  @default("light")

  // Relations
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("settings")
}

model GeneratedDocument {
  id                String        @id @default(cuid())
  userDocumentId    String
  generatedContent  String        @db.Text
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  userDocument      UserDocuments @relation(fields: [userDocumentId], references: [id], onDelete: Cascade)

  @@map("generated_documents")
}

model AiRequest {
  id              String         @id @default(cuid())
  userId          String
  userDocumentId  String?
  prompt          String         @db.Text
  response        String         @db.Text
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userDocument    UserDocuments? @relation(fields: [userDocumentId], references: [id], onDelete: SetNull)

  @@map("ai_requests")
}