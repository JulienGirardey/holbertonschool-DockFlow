import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from '../../../../generated/prisma'
import { getUserIdFromToken } from "@/lib/auth";
import Groq from 'groq-sdk';

const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined
}

export const prisma = globalForPrisma.prisma ?? new PrismaClient()

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma

// ‚úÖ Configuration Groq uniquement
const groq = new Groq({
    apiKey: process.env.GROQ_API_KEY!
});

export async function POST(
    req: NextRequest,
    { params }: { params: Promise<{ id: string }> }
) {
    try {
        const userId = getUserIdFromToken(req);
        if (!userId) {
            return NextResponse.json(
                { error: "Unauthorized" },
                { status: 401 }
            );
        }

        const { id } = await params;
        const documentId = id;
        const { prompt } = await req.json();

        if (!prompt) {
            return NextResponse.json(
                { error: "Prompt is required" },
                { status: 400 }
            );
        }

        const document = await prisma.userDocuments.findFirst({
            where: {
                id: documentId,
                userId: userId
            }
        });

        if (!document) {
            return NextResponse.json(
                { error: "Document not found" },
                { status: 404 }
            );
        }

        let generatedContent: string = "Error: Content generation failed";
        let aiResponse: string = "Initialization error";
        let aiWorked = false;

        // ‚úÖ Essai avec Groq AI
        try {
            console.log('ü§ñ Trying Groq AI...');
            
            const completion = await groq.chat.completions.create({
                messages: [
                    {
                        role: "system",
                        content: "Tu es un assistant d'√©criture expert. G√©n√®re du contenu d√©taill√©, pertinent et bien structur√© selon la demande de l'utilisateur."
                    },
                    {
                        role: "user",
                        content: `TITRE: ${document.title || document.objective || 'Sans titre'}
CONTENU ACTUEL: ${document.rawContent || 'Aucun contenu'}
DEMANDE: ${prompt}

G√©n√®re du contenu informatif et adapt√© au sujet. Sois pr√©cis et technique si n√©cessaire.`
                    }
                ],
                model: "openai/gpt-oss-20b",
                temperature: 0.7,
                max_tokens: 1024,
                stream: false
            });

            // ‚úÖ AJOUT - Debug pour voir ce que Groq retourne
            console.log('üì¶ Groq response:', JSON.stringify(completion, null, 2));
            console.log('üìù Groq choices:', completion.choices);
            console.log('üí¨ First choice content:', completion.choices[0]?.message?.content);

            generatedContent = completion.choices[0]?.message?.content || "Erreur lors de la g√©n√©ration";
            aiResponse = "Groq GPT-OSS-20B - Success"; // ‚úÖ Correction du nom du mod√®le
            aiWorked = true;
            
            console.log('‚úÖ SUCCESS with Groq AI');
            console.log('üìÑ Final generated content length:', generatedContent.length);

        } catch (aiError: unknown) {
            console.log('‚ùå Groq failed:', aiError instanceof Error ? aiError.message : 'Unknown error');
        }

        // ‚úÖ Fallback intelligent si Groq ne fonctionne pas
        if (!aiWorked) {
            console.log('üîÑ Using smart fallback - AI not available');
            generatedContent = generateSmartFallback(prompt, document);
            aiResponse = "Smart fallback - DocFlow Pro Assistant";
        }

        // Sauvegarder la requ√™te IA
        await prisma.aiRequest.create({
            data: {
                userId: document.userId,
                userDocumentId: documentId,
                prompt,
                response: aiResponse
            }
        });

        // Sauvegarder le document g√©n√©r√©
        const generatedDocument = await prisma.generatedDocument.create({
            data: {
                userDocumentId: documentId,
                generatedContent
            },
            select: {
                id: true,
                userDocumentId: true,
                generatedContent: true,
                createdAt: true
            }
        });

        return NextResponse.json(generatedDocument, { status: 201 });

    } catch (error) {
        console.error('Generate document error:', error);
        return NextResponse.json(
            { error: "Internal server error" },
            { status: 500 }
        );
    }
}

// ‚úÖ Fonction de fallback intelligent
function generateSmartFallback(prompt: string, document: any): string {
    const content = document.rawContent || '';
    const title = document.title || document.objective || '';
    const now = new Date().toLocaleDateString('fr-FR');
    const lowerPrompt = prompt.toLowerCase();
    
    if (lowerPrompt.includes('r√©sum√©') || lowerPrompt.includes('summary') || lowerPrompt.includes('synth√®se')) {
        const sentences: string[] = content.split(/[.!?]+/).filter((s: string): boolean => s.trim().length > 10);
        const keyPoints = sentences.slice(0, 3).map(s => s.trim());
        
        return `# R√©sum√© Ex√©cutif - "${title}"

*G√©n√©r√© le ${now}*

## üéØ Points Cl√©s :
${keyPoints.map((point, i) => `${i + 1}. ${point}`).join('\n')}

## üìä Synth√®se :
${content.substring(0, 300)}${content.length > 300 ? '...' : ''}

## üí° Recommandations :
- Approfondir les aspects mentionn√©s
- Structurer davantage le contenu
- Ajouter des exemples concrets

*[G√©n√©r√© par Assistant IA - DocFlow Pro]*`;
    }
    
    if (lowerPrompt.includes('am√©liore') || lowerPrompt.includes('improve') || lowerPrompt.includes('mieux')) {
        return `# ${title} - Version Optimis√©e

*Am√©liorations appliqu√©es le ${now}*

## üìù Contenu Restructur√© :

### Introduction
${content.split('\n')[0] || 'Pr√©sentation du sujet principal...'}

### D√©veloppement
${content}

### Points d'Am√©lioration Sugg√©r√©s :
- ‚úÖ Structure claire avec titres et sous-sections
- ‚úÖ Lisibilit√© am√©lior√©e avec des puces
- ‚úÖ Ton plus engageant et professionnel
- ‚úÖ Ajout d'√©l√©ments visuels (√©mojis, puces)

### Prochaines √âtapes :
1. R√©viser le contenu selon ces suggestions
2. Ajouter des exemples concrets
3. Valider avec les parties prenantes

*[Optimis√© par Assistant IA - DocFlow Pro]*`;
    }

    if (lowerPrompt.includes('professionnel') || lowerPrompt.includes('formal') || lowerPrompt.includes('business')) {
        return `# Rapport Professionnel : ${title}

**Date :** ${now}  
**Statut :** Document Reformat√©

---

## üéØ Objectif
${title}

## üìã Contenu Principal
${content}

## üìä Analyse
Ce document pr√©sente une approche m√©thodique et structur√©e pour atteindre les objectifs d√©finis.

## üîç Observations
- Contenu bien document√©
- Structure logique respect√©e
- Pr√©sentation professionnelle appliqu√©e

## üìà Recommandations
1. **Court terme :** Validation des √©l√©ments pr√©sent√©s
2. **Moyen terme :** Impl√©mentation des solutions propos√©es
3. **Long terme :** Suivi et optimisation continue

---
*Document g√©n√©r√© avec DocFlow Pro - Assistant IA Professionnel*`;
    }

    if (lowerPrompt.includes('tradui') || lowerPrompt.includes('translate') || lowerPrompt.includes('anglais')) {
        return `# ${title} - English Translation

*Translated on ${now}*

## üåç Original Content (French):
${content}

## üìù English Translation:
[This would be the English translation of your content. For now, this is a template showing the structure.]

## üìã Translation Notes:
- Professional tone maintained
- Technical terms preserved
- Cultural context adapted

*[Translation service powered by DocFlow Pro]*`;
    }

    if (lowerPrompt.includes('plan') || lowerPrompt.includes('structure') || lowerPrompt.includes('organise')) {
        return `# Plan Structur√© - ${title}

*Plan cr√©√© le ${now}*

## üéØ Objectif Principal
${title}

## üìã Structure Propos√©e

### 1. Introduction
- Pr√©sentation du contexte
- Objectifs vis√©s

### 2. D√©veloppement
${content.split('\n').slice(0, 3).map((line: string, i: number) => `- Point ${i + 1}: ${line}`).join('\n')}

### 3. Conclusion
- Synth√®se des √©l√©ments cl√©s
- Prochaines √©tapes

## ‚è∞ Timeline Sugg√©r√©e
1. **Phase 1** (Court terme): Pr√©paration
2. **Phase 2** (Moyen terme): Ex√©cution  
3. **Phase 3** (Long terme): √âvaluation

*[Plan structur√© par DocFlow Pro]*`;
    }

    // G√©n√©ration par d√©faut
    return `# ${title} - D√©veloppement Assist√© par IA

*G√©n√©r√© le ${now} sur la base de : "${prompt}"*

## üöÄ Contenu Enrichi

${content || 'Contenu √† d√©velopper...'}

## üí° Suggestions d'Extension

### Axes de D√©veloppement :
- **Structuration :** Organiser en sections logiques
- **Enrichissement :** Ajouter des d√©tails et exemples
- **Optimisation :** Am√©liorer la clart√© et l'impact

### Actions Recommand√©es :
1. D√©finir les objectifs pr√©cis
2. Structurer le contenu par priorit√©
3. Ajouter des √©l√©ments de validation

---
*Propuls√© par DocFlow Pro - Votre Assistant IA Intelligent*`;
}

export async function GET(
    req: NextRequest,
    { params }: { params: Promise<{ id: string }> }
) {
    try {
        const userId = getUserIdFromToken(req);
        if (!userId) {
            return NextResponse.json(
                { error: "Unauthorized" },
                { status: 401 }
            );
        }

        const { id } = await params;
        const documentId = id;

        const document = await prisma.userDocuments.findFirst({
            where: {
                id: documentId,
                userId: userId
            }
        });

        if (!document) {
            return NextResponse.json(
                { error: "Document not found" },
                { status: 404 }
            );
        }
        
        const generatedDocuments = await prisma.generatedDocument.findMany({
            where: { userDocumentId: documentId },
            select: {
                id: true,
                userDocumentId: true,
                generatedContent: true,
                createdAt: true,
                updatedAt: true,
                userDocument: true
            },
            orderBy: { updatedAt: 'desc' }
        });

        return NextResponse.json(generatedDocuments);

    } catch (error) {
        console.error('Display all documents failed:', error);
        return NextResponse.json(
            { error: "Internal server error" },
            { status: 500 }
        );
    }
}
